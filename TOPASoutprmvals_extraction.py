'''
Author: Adam A. Corrao
Date created: September 1st, 2022
Date last edited: September 2nd, 2022
Script function:
This script parses csv files generated by TOPAS when using the "out_prm_vals_on_convergence" macro based on provided
prefixes for refined parameters.
How to use:
1) Ensure that refinements were run using the "out_prm_vals_on_convergence" macro, if not add this and re-run.
Ex: out_prm_vals_on_convergence "ThisIsMyData.csv"
2) Provide parameter name prefixes (e.g., beq, occ, a, b) - these do not have to be present in any of files as the
script will search each output csv for it. This will also work if prms are refined in some files and not in others.
3) Provide a filename for the file that will be saved
4) Select all csv files you wish to parse with the GUI tool
'''
import pandas as pd
import os
import colorama
from colorama import Fore, Back, init
import tkfilebrowser #pip install tkfilebrowser if you have not already
from tkinter import *
import sys
init(autoreset=True) #autoresets colors to default after colored print statements
os.system('cls')

##############################################EDIT LINES BELOW##########################################################

prmprefixes = ['a','beq'] #prefixes for the prm names - can use anything
csvtomake = 'ExtractedValuesForSelectedFiles.csv' #give a filename for the csv you will create with extracted values

########################################################################################################################
###############################Extraction script below - NOT RECOMMENDED TO EDIT########################################
########################################################################################################################
print(Fore.CYAN + "\nPlease select the csvs you would like to extract info from\n")
root = Tk()
root.geometry('200x200')
root.grid_rowconfigure(0, weight=1)
root.grid_columnconfigure(0, weight=1)
outfiles = tkfilebrowser.askopenfilenames(filetypes=(("csv files","*.csv"),("all files","*.*")),
                                          title="Select csv file(s)")
if not outfiles:
    print(Back.RED + 'Selection cancelled, quitting program\nPlease restart\n')
    sys.exit()
else:
    root.destroy()
    outdir = outfiles[0].rsplit(os.sep,1)[0]
    outfilenames = []
    for file in outfiles:  # This loop makes a list with just the folder names, not full paths
        f = file.split(os.sep)[-1]
        outfilenames.append(f)
    print(Fore.GREEN + "Output directory:\n\t" + outdir + '\n')
    print(Fore.GREEN + "Output csv files selected:\n")
    for f in outfilenames:
        print(Fore.GREEN + '\t' + f + '\n')

prmnamelist = []
#First we need to find all the prm names used and put them in a list
for file in outfiles:
    dummy_frame = pd.read_csv(file,delim_whitespace=True)
    for i in prmprefixes: #loop through prm prefixes
        childdf = dummy_frame.filter(regex=i)
        for col in childdf.columns:
            if col not in prmnamelist: #avoid duplicates
                prmnamelist.append(col)
prmnames = {k:[] for k in prmnamelist} #creates dictionary (list of lists) for prm names

#loops over the csv files to parse, then looks each prm name in the csv and appends value if it is present or N/A if not
for file in outfiles:
    dummy_frame = pd.read_csv(file, delim_whitespace=True)
    for i in prmnamelist:
        if i in dummy_frame:
            prmnames[i].append(dummy_frame[i][0])
        if i not in dummy_frame:
            prmnames[i].append('nAn')

df = pd.DataFrame.from_dict(data=prmnames,orient='columns') #creates dataframe from dictionary of prm names and values
df.insert(loc=0, column='filename',value=outfilenames) #adds associated filename at row for sets of values
df.to_csv(outdir + os.sep + csvtomake,float_format='%.9f',index=False) #saves dataframe in directory with output files
print(Fore.GREEN + '\nExtracted prms and values saved to:\n' + Fore.RED + outdir + os.sep + csvtomake + Fore.GREEN +
      '\n\nDone')
